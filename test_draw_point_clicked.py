
# Generated by CodiumAI
from unittest.mock import Mock
import juego_del_caos
from juego_del_caos import *
from tkinter import Canvas
from ctypes import pointer


import pytest

"""
Code Analysis

Objective:
The objective of the function draw_point_clicked is to handle the event of a mouse click on the canvas and draw a point on the canvas if the click is inside a given triangle.

Inputs:
- event: the event object generated by the mouse click on the canvas.

Flow:
1. Check if the in_process flag is False.
2. Get the x and y coordinates of the mouse click from the event object.
3. Check if the mouse click is inside the triangle defined by the points punto_a, punto_b, and punto_c using the is_point_in_triangle function.
4. If the mouse click is inside the triangle, delete any existing point on the canvas and draw a new point using the draw_point function.

Outputs:
- None

Additional aspects:
- The function uses global variables point, in_process, punto_a, punto_b, and punto_c.
- The function assumes that the canvas and the draw_point and is_point_in_triangle functions are defined and accessible.
"""



class TestDrawPointClicked:
    # Tests that a point is drawn inside the triangle when clicked inside the triangle. 
    def test_draw_point_clicked_happy(self):
        global in_process, punto_a, punto_b, punto_c
        juego_del_caos.in_process = False
        juego_del_caos.create_gui()
        juego_del_caos.punto_a = (0, 0)
        juego_del_caos.punto_b = (10, 0)
        juego_del_caos.punto_c = (5, 10)
        event = Mock(x=3, y=5)
        juego_del_caos.draw_point_clicked(event)
        assert juego_del_caos.ubi_punto == (3, 5)
        assert juego_del_caos.point in juego_del_caos.canvas.find_all()
        assert juego_del_caos.canvas.itemcget(juego_del_caos.point, "fill") == "black"
        assert juego_del_caos.canvas.coords(juego_del_caos.point) == [1, 3, 5, 7]

    # Tests that no point is drawn when clicked outside the triangle. 
    def test_draw_point_clicked_edge(self):
        global in_process, punto_a, punto_b, punto_c
        juego_del_caos.in_process = False
        juego_del_caos.point = None
        juego_del_caos.ubi_punto = None
        juego_del_caos.clean_points()
        juego_del_caos.create_gui()
        juego_del_caos.punto_a = (0, 0)
        juego_del_caos.punto_b = (5, 10) 
        juego_del_caos.punto_c = (10, 0)
        event = Mock(x=15, y=15)
        juego_del_caos.draw_point_clicked(event)

        juego_del_caos.clean_points()
        assert juego_del_caos.ubi_punto is None
        assert juego_del_caos.point is None

  

    # Tests that the global variables are updated correctly. 
    def test_draw_point_clicked_general2(self):
        global in_process, punto_a, punto_b, punto_c
        juego_del_caos.in_process = False
        juego_del_caos.create_gui()
        juego_del_caos.punto_a = (0, 0)
        juego_del_caos.punto_b = (10, 0)
        juego_del_caos.punto_c = (5, 10)
        event = Mock(x=3, y=5)
        juego_del_caos.draw_point_clicked(event)
        assert juego_del_caos.in_process is False
        assert juego_del_caos.punto_a == (0, 0)
        assert juego_del_caos.punto_b == (10, 0)
        assert juego_del_caos.punto_c == (5, 10)



    # Tests that the point drawn is of the correct size and color. 
    def test_draw_point_clicked_general(self):
        global in_process, punto_a, punto_b, punto_c
        juego_del_caos.in_process = False
        juego_del_caos.create_gui()
        juego_del_caos.punto_a = (0, 0)
        juego_del_caos.punto_b = (10, 0)
        juego_del_caos.punto_c = (5, 10)
        event = Mock(x=3, y=5)
        juego_del_caos.draw_point_clicked(event)
        assert juego_del_caos.canvas.itemcget(juego_del_caos.point, "fill") == "black"
        assert juego_del_caos.canvas.coords(juego_del_caos.point) == [1, 3, 5, 7]