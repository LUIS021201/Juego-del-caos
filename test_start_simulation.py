
# Generated by CodiumAI
from juego_del_caos import *
from tkinter import Canvas
import random
import subprocess
import time


import pytest

"""
Code Analysis

Objective:
The objective of the "start_simulation" function is to simulate a random walk on a canvas, where the starting point is chosen by the user and the next point is randomly selected among three fixed points. The simulation lasts for 7 seconds and during this time, the function draws the midpoint between the current point and the randomly selected point on the canvas.

Inputs:
- None

Flow:
1. Check if a starting point has been selected and the simulation is not already in process.
2. If so, add the starting point to the list of all points and initialize the list of fixed points.
3. Start a timer to keep track of the simulation time.
4. While the simulation time is less than 7 seconds, randomly select one of the fixed points.
5. Calculate the midpoint between the current point and the selected fixed point.
6. Draw the midpoint on the canvas and add it to the list of all points.
7. Update the canvas and repeat steps 4-7 until the simulation time is up.
8. Set the in_process flag to False.

Outputs:
- None

Additional aspects:
- The function uses global variables to keep track of the canvas, the fixed points, the current point, the list of all points, and the simulation status.
- The function calls the "get_middle_point" and "draw_point" functions to calculate the midpoint and draw it on the canvas, respectively.
- The function uses the "time" module to keep track of the simulation time.
- The function updates the canvas using the "update" method of the root window.
"""



class TestStartSimulation:
    
    
    # Tests that clicking on the canvas adds a point to all_points. 
    def test_click_adds_point(self):
        start_simulation()
        canvas.event_generate("<Button-1>", x=300, y=100)
        assert len(all_points) == 1

    # Tests that randomly choosing a point from punto_a, punto_b, punto_c adds a point to all_points. 
    def test_random_point_adds_point(self):
        start_simulation()
        punto_escogido = random.choice([punto_a, punto_b, punto_c])
        punto_medio = get_middle_point(ubi_punto, punto_escogido)
        assert draw_point(punto_medio[0], punto_medio[1]) in all_points

    # Tests that if the time limit of 7 seconds is reached before the function finishes, the function stops adding points to all_points. 
    def test_time_limit_reached(self):
        start_simulation()
        start_time = time.time()
        while (time.time() - start_time) < 8:
            canvas.event_generate("<Button-1>", x=300, y=100)
        assert len(all_points) < 10

    # Tests that if no point is selected, in_process is False. 
    def test_no_point_selected(self):
        global in_process
        in_process = False
        start_simulation()
        assert in_process == False

    # Tests that if in_process is True, the function does not add points to all_points. 
    def test_in_process_no_points_added(self):
        global in_process
        in_process = True
        start_simulation()
        assert len(all_points) == 0